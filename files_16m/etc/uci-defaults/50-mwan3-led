#!/bin/sh
#
# mwan3 modems and colors led config

[ -f /etc/.config.lock ] && exit 0


mwan3_led_config_gen(){
cat << 'EOF' > /usr/share/mwan3_led_config.sh
#!/bin/sh

usage() {
	echo "Usage: $0 -i <interface1> [interface2 ...] -l <led1> [led2 ...] [-o <led_off1> [led_off2 ...]]"
	exit 1
}

# Parse arguments
parse_args() {
	while [ $# -gt 0 ]; do
		case "$1" in
			-i)
				shift
				while [ $# -gt 0 ] && [ "$(echo "$1" | cut -c1)" != "-" ]; do
					interfaces="$interfaces $1"
					shift
				done
			;;
			-l)
				shift
				while [ $# -gt 0 ] && [ "$(echo "$1" | cut -c1)" != "-" ]; do
					leds_on="$leds_on $1"
					shift
				done
			;;
			-o)
				shift
				while [ $# -gt 0 ] && [ "$(echo "$1" | cut -c1)" != "-" ]; do
					leds_off="$leds_off $1"
					shift
				done
			;;
			*)
				usage
			;;
		esac
	done
}

# Validate and adjust parameters
check_counts() {
	# Count interfaces and LEDs
	count_int=$(echo "$interfaces" | awk '{print NF}')
	count_on=$(echo "$leds_on" | awk '{print NF}')

	if [ "$count_int" -eq 0 ]; then
		echo "Error: at least one interface must be specified"
		usage
	fi

	if [ "$count_on" -eq 0 ]; then
		echo "Error: at least one LED must be specified with -l"
		usage
	fi

	# If more LEDs than interfaces, limit LEDs to match interfaces
	if [ "$count_on" -gt "$count_int" ]; then
		leds_on=$(echo "$leds_on" | awk -v n="$count_int" '{for(i=1;i<=n;i++) printf "%s ", $i; print ""}')
		count_on="$count_int"
	fi

	# If more off LEDs than interfaces, limit off LEDs to match interfaces
	if [ -n "$leds_off" ]; then
		count_off=$(echo "$leds_off" | awk '{print NF}')
		if [ "$count_off" -gt "$count_int" ]; then
			leds_off=$(echo "$leds_off" | awk -v n="$count_int" '{for(i=1;i<=n;i++) printf "%s ", $i; print ""}')
		fi
	fi
}

# Generate configuration
generate_config() {
	echo "$interfaces" | awk -v leds_on="$leds_on" -v leds_off="$leds_off" '
	BEGIN {
		split(leds_on, on_arr, " ")
		split(leds_off, off_arr, " ")
	}
	{
		for (i = 1; i <= NF; i++) {
			print "config led '\''" $i "'\''"
			print "    option iface '\''" $i "'\''"
			print "    option led_on '\''" on_arr[i] "'\''"
			if (leds_off != "" && i <= length(off_arr)) {
				print "    option led_off '\''" off_arr[i] "'\''"
			}
			print ""
		}
	}'
}

# Main program
main() {
	if [ $# -eq 0 ]; then
		usage
	fi

	parse_args "$@"
	check_counts
	generate_config
}

main "$@"

EOF

chmod +x /usr/share/mwan3_led_config.sh
}

mwan3_led_trigger_gen(){
touch /etc/config/mwan3_led
cat << 'EOF' > /usr/share/mwan3_led_trigger.sh
. /lib/functions.sh

mwan3_led_trigger() {
	local INTERFACE="$1"
	local ACTION="$2"

	# LED state function
	set_led() {
		local led_name="$1"
		local value="$2"
		local led_path="/sys/class/leds/${led_name}/brightness"

		# Set state LED
		echo "$value" > "$led_path" 2>/dev/null
}

	# Get config values
	handle_led_config() {
		local iface led_on led_off

		config_get iface "$1" iface
		config_get led_on "$1" led_on
		config_get led_off "$1" led_off

		# Check interface
		[ "$iface" != "$INTERFACE" ] && return

		case "$ACTION" in
			connected)
				# Selected LED led_on
				set_led "$led_on" 255
				# if defined led_off
				[ -n "$led_off" ] && set_led "$led_off" 0
			;;
			disconnected)
			if [ -n "$led_off" ]; then
				# if defined led_off
				set_led "$led_off" 255
			fi
			# Off flashing LED led_on
			set_led "$led_on" 0
			;;
		esac
	}

	# get config
	config_load mwan3_led
	config_foreach handle_led_config led
}
EOF

}

mwan3_user_add(){
cat << 'EOF' >> /etc/mwan3.user
[ -f /usr/share/mwan3_led_trigger.sh ] && {
        . /usr/share/mwan3_led_trigger.sh
        mwan3_led_trigger $INTERFACE $ACTION
}

EOF
}


# set mwan3.user config
board="$(cat /tmp/sysinfo/board_name)"

case $board in
	verlell,m2-router|\
	mikrotik,routerboard-rbm33g)
		exit 0
	;;
	*)
		mwan3_led_config_gen
		mwan3_led_trigger
		mwan3_user_add
	;;
esac

